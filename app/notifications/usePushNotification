import React from 'react'
import useAsync from "react-use/lib/useAsync";
import { useRef, useState } from "react";
import {
  addNotificationReceivedListener,
  addNotificationResponseReceivedListener,
  AndroidImportance,
  removeNotificationSubscription,
  setNotificationChannelAsync,
  setNotificationHandler,
  useLastNotificationResponse,
} from "expo-notifications";
import type { Subscription } from "expo-modules-core";
import type { Notification, NotificationResponse } from "expo-notifications";
import { navigationRef } from "../app.navigator";

setNotificationHandler({
    // eslint-disable-next-line @typescript-eslint/require-await
    handleNotification: async () => ({
      shouldShowAlert: true,
      shouldPlaySound: true,
      shouldSetBadge: false,
    }),
  });
 
  

  const usePushNotifications = (
    onTapNotification?: (response: NotificationResponse) => void
  ): {
    notification: Notification | null;
  } => {
    const [notification, setNotification] = useState<Notification | null>(null);
    const notificationListener = useRef<Subscription>();
    const responseListener = useRef<Subscription>();
    const lastNotificationResponse = useLastNotificationResponse();

    useAsync(async () => {
      if (lastNotificationResponse) {
  
        //get the route
        const incidentId = (
          lastNotificationResponse.notification.request.content.data.incidentId
        );
        // navigationRef.current?.navigate("RequestChoice", { incidentId });
      }
    }, [lastNotificationResponse]);
  
    useAsync(async () => {
      notificationListener.current =
        addNotificationReceivedListener(setNotification);
  
      responseListener.current = addNotificationResponseReceivedListener(
        (response) => onTapNotification?.(response)
        // () =>  Linking.openURL("exp://home")
      );
  
      await setNotificationChannelAsync("default", {
        name: "default",
        importance: AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: "#FF231F7C",
        enableVibrate: true,
        sound: "default",
      });
  
      return () => {
        if (notificationListener.current) {
          removeNotificationSubscription(notificationListener.current);
        }
        if (responseListener.current) {
          removeNotificationSubscription(responseListener.current);
        }
      };
    });
  
    return { notification };
  };
  
  export default usePushNotifications;
